{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Data structures relationships made easy Installation pip install corm Example from corm import Storage , Entity , Nested class Address ( Entity ): street : str number : int class User ( Entity ): name : str address : Address = Nested ( entity_type = Address ) storage = Storage () john = User ( data = { 'name' : 'John' , 'address' : { 'street' : 'First' , 'number' : 1 }}, storage = storage , ) assert john . address . street == 'First' assert john . address . number == 1","title":"Overview"},{"location":"#installation","text":"pip install corm","title":"Installation"},{"location":"#example","text":"from corm import Storage , Entity , Nested class Address ( Entity ): street : str number : int class User ( Entity ): name : str address : Address = Nested ( entity_type = Address ) storage = Storage () john = User ( data = { 'name' : 'John' , 'address' : { 'street' : 'First' , 'number' : 1 }}, storage = storage , ) assert john . address . street == 'First' assert john . address . number == 1","title":"Example"},{"location":"benchmarks/","text":"","title":"Benchmarks"},{"location":"faq/","text":"Is corm fast or memory efficiency? Not sure, main goal of corm is convenience not performance Is it validation library? No, corm is about relations between entities. It does nothing for validation.","title":"FAQ"},{"location":"faq/#is-corm-fast-or-memory-efficiency","text":"Not sure, main goal of corm is convenience not performance","title":"Is corm fast or memory efficiency?"},{"location":"faq/#is-it-validation-library","text":"No, corm is about relations between entities. It does nothing for validation.","title":"Is it validation library?"},{"location":"to-be-done/","text":"Entity settings class from corm import Storage , Entity class Address ( Entity ): class Config : exclude = ( 'description' ,) street : str number : int storage = Storage () address = Address ( data = { 'street' : 'Second' , 'number' : 2 , 'description' : 'address' }, storage = storage , ) assert address . dict () == { 'street' : 'Second' , 'number' : 2 } Change data through relationships import typing as t from corm import Storage , Entity , Nested class Address ( Entity ): street : str number : int class User ( Entity ): name : str addresses : t . List [ Address ] = Nested ( entity_type = Address , many = True ) storage = Storage () john = User ( data = { 'name' : 'John' , 'addresses' : [{ 'street' : 'First' , 'number' : 1 }] }, storage = storage , ) additional_address = Address ( data = { 'street' : 'Second' , 'number' : 2 }, storage = storage , ) john . addresses . append ( additional_address ) assert john . dict () == { 'name' : 'John' , 'addresses' : [ { 'street' : 'First' , 'number' : 1 }, { 'street' : 'Second' , 'number' : 2 }, ], } Entity migration between different instances of storage from corm import Storage , Entity , Field class User ( Entity ): id : int = Field ( pk = True ) storage1 = Storage () storage2 = Storage () user = User ( data = { 'id' : 1 }, storage = storage1 ) storage2 . merge ( user ) assert storage1 . get ( User . id , 1 ) is None assert storage2 . get ( User . id , 1 ) is user Query API from corm import Storage , Entity class User ( Entity ): name : str storage = Storage () john = User ( data = { 'name' : 'John' }, storage = storage ) user = storage . select ( User ) . filter ( User . name == 'John' ) . first () assert user == john","title":"To Be Done"},{"location":"to-be-done/#entity-settings-class","text":"from corm import Storage , Entity class Address ( Entity ): class Config : exclude = ( 'description' ,) street : str number : int storage = Storage () address = Address ( data = { 'street' : 'Second' , 'number' : 2 , 'description' : 'address' }, storage = storage , ) assert address . dict () == { 'street' : 'Second' , 'number' : 2 }","title":"Entity settings class"},{"location":"to-be-done/#change-data-through-relationships","text":"import typing as t from corm import Storage , Entity , Nested class Address ( Entity ): street : str number : int class User ( Entity ): name : str addresses : t . List [ Address ] = Nested ( entity_type = Address , many = True ) storage = Storage () john = User ( data = { 'name' : 'John' , 'addresses' : [{ 'street' : 'First' , 'number' : 1 }] }, storage = storage , ) additional_address = Address ( data = { 'street' : 'Second' , 'number' : 2 }, storage = storage , ) john . addresses . append ( additional_address ) assert john . dict () == { 'name' : 'John' , 'addresses' : [ { 'street' : 'First' , 'number' : 1 }, { 'street' : 'Second' , 'number' : 2 }, ], }","title":"Change data through relationships"},{"location":"to-be-done/#entity-migration-between-different-instances-of-storage","text":"from corm import Storage , Entity , Field class User ( Entity ): id : int = Field ( pk = True ) storage1 = Storage () storage2 = Storage () user = User ( data = { 'id' : 1 }, storage = storage1 ) storage2 . merge ( user ) assert storage1 . get ( User . id , 1 ) is None assert storage2 . get ( User . id , 1 ) is user","title":"Entity migration between different instances of storage"},{"location":"to-be-done/#query-api","text":"from corm import Storage , Entity class User ( Entity ): name : str storage = Storage () john = User ( data = { 'name' : 'John' }, storage = storage ) user = storage . select ( User ) . filter ( User . name == 'John' ) . first () assert user == john","title":"Query API"},{"location":"usage/entity/","text":"Base usage You can describe wrappers for data structures with Entity from corm import Storage , Entity class User ( Entity ): id : int name : str storage = Storage () john = User ({ 'id' : 1 , 'name' : 'John' , 'address' : 'kirova 1' }, storage ) john . name = 'Not John' assert john . dict () == { 'id' : 1 , 'name' : 'Not John' , 'address' : 'kirova 1' } Note You don't need to describe full data structure, only fields you need, rest corm leave as is. In example above address key","title":"Entity"},{"location":"usage/entity/#base-usage","text":"You can describe wrappers for data structures with Entity from corm import Storage , Entity class User ( Entity ): id : int name : str storage = Storage () john = User ({ 'id' : 1 , 'name' : 'John' , 'address' : 'kirova 1' }, storage ) john . name = 'Not John' assert john . dict () == { 'id' : 1 , 'name' : 'Not John' , 'address' : 'kirova 1' } Note You don't need to describe full data structure, only fields you need, rest corm leave as is. In example above address key","title":"Base usage"},{"location":"usage/hooks/","text":"Simple example import typing as t from corm import Storage , Entity , Nested , Hook , HookContext storage = Storage () class Address ( Entity ): id : int street : str number : int class User ( Entity ): id : int name : str address : Address = Nested ( entity_type = Address ) class ExcludeHook ( Hook ): match_entities = [ User , Address ] def __init__ ( self , exclude_fields : t . List [ str ], match_entities = None ): super () . __init__ ( match_entities ) self . exclude_fields = exclude_fields def match ( self , data , context : HookContext ): for field in self . exclude_fields : data . pop ( field , None ) return data john = User ( data = { 'id' : 1 , 'name' : 'John' , 'address' : { 'id' : 2 , 'street' : 'First' , 'number' : 1 }, }, storage = storage , ) assert john . dict ( hooks = [ ExcludeHook ( exclude_fields = [ 'id' ])]) == { 'name' : 'John' , 'address' : { 'street' : 'First' , 'number' : 1 }, }","title":"Hooks"},{"location":"usage/hooks/#simple-example","text":"import typing as t from corm import Storage , Entity , Nested , Hook , HookContext storage = Storage () class Address ( Entity ): id : int street : str number : int class User ( Entity ): id : int name : str address : Address = Nested ( entity_type = Address ) class ExcludeHook ( Hook ): match_entities = [ User , Address ] def __init__ ( self , exclude_fields : t . List [ str ], match_entities = None ): super () . __init__ ( match_entities ) self . exclude_fields = exclude_fields def match ( self , data , context : HookContext ): for field in self . exclude_fields : data . pop ( field , None ) return data john = User ( data = { 'id' : 1 , 'name' : 'John' , 'address' : { 'id' : 2 , 'street' : 'First' , 'number' : 1 }, }, storage = storage , ) assert john . dict ( hooks = [ ExcludeHook ( exclude_fields = [ 'id' ])]) == { 'name' : 'John' , 'address' : { 'street' : 'First' , 'number' : 1 }, }","title":"Simple example"},{"location":"usage/key-relationships/","text":"Simple case from corm import Storage , Entity , NestedKey , Field class Entity ( Entity ): id : int = Field ( pk = True ) name : str class EntityHolder ( Entity ): name : str entity : Entity = NestedKey ( Entity . id , 'entity_id' ) storage = Storage () entity = Entity ({ 'id' : 123 , 'name' : 'entity' }, storage = storage ) holder = EntityHolder ({ 'entity_id' : 123 }, storage = storage ) assert holder . entity == entity Bidirectional key relationships from corm import ( Storage , Field , Entity , NestedKey , KeyRelationship , RelationType , ) class Entity ( Entity ): id : int = Field ( pk = True ) name : str holder : 'EntityHolder' = KeyRelationship ( entity_type = 'EntityHolder' , field_name = 'id' , relation_type = RelationType . CHILD , ) class EntityHolder ( Entity ): name : str entity : Entity = NestedKey ( related_entity_field = Entity . id , key = 'entity_id' , back_relation_type = RelationType . CHILD , ) storage = Storage () entity = Entity ({ 'id' : 123 , 'name' : 'entity' }, storage = storage ) holder = EntityHolder ({ 'name' : 'holder' , 'entity_id' : 123 }, storage = storage ) assert holder . entity == entity assert entity . holder == holder","title":"Key relationships"},{"location":"usage/key-relationships/#simple-case","text":"from corm import Storage , Entity , NestedKey , Field class Entity ( Entity ): id : int = Field ( pk = True ) name : str class EntityHolder ( Entity ): name : str entity : Entity = NestedKey ( Entity . id , 'entity_id' ) storage = Storage () entity = Entity ({ 'id' : 123 , 'name' : 'entity' }, storage = storage ) holder = EntityHolder ({ 'entity_id' : 123 }, storage = storage ) assert holder . entity == entity","title":"Simple case"},{"location":"usage/key-relationships/#bidirectional-key-relationships","text":"from corm import ( Storage , Field , Entity , NestedKey , KeyRelationship , RelationType , ) class Entity ( Entity ): id : int = Field ( pk = True ) name : str holder : 'EntityHolder' = KeyRelationship ( entity_type = 'EntityHolder' , field_name = 'id' , relation_type = RelationType . CHILD , ) class EntityHolder ( Entity ): name : str entity : Entity = NestedKey ( related_entity_field = Entity . id , key = 'entity_id' , back_relation_type = RelationType . CHILD , ) storage = Storage () entity = Entity ({ 'id' : 123 , 'name' : 'entity' }, storage = storage ) holder = EntityHolder ({ 'name' : 'holder' , 'entity_id' : 123 }, storage = storage ) assert holder . entity == entity assert entity . holder == holder","title":"Bidirectional key relationships"},{"location":"usage/relationships/","text":"Simple relationship from corm import Storage , Entity , Nested class Address ( Entity ): street : str number : int class User ( Entity ): name : str address : Address = Nested ( entity_type = Address ) storage = Storage () john = User ( data = { 'name' : 'John' , 'address' : { 'street' : 'First' , 'number' : 1 }}, storage = storage , ) assert john . address . street == 'First' assert john . address . number == 1 Manually related entities from corm import Storage , Entity , Relationship , RelationType storage = Storage () class Address ( Entity ): street : str number : int class User ( Entity ): name : str address : Address = Relationship ( entity_type = Address , relation_type = RelationType . PARENT , ) address = Address ({ 'street' : 'First' , 'number' : 1 }, storage ) john = User ({ 'name' : 'John' }, storage ) storage . make_relation ( from_ = john , to_ = address , relation_type = RelationType . PARENT , ) assert john . address == address Bidirectional relationships from corm import Storage , Entity , Relationship , Nested , RelationType storage = Storage () class Address ( Entity ): street : str number : int user : 'User' = Relationship ( entity_type = 'User' , relation_type = RelationType . CHILD , ) class User ( Entity ): name : str address : Address = Nested ( entity_type = Address , back_relation_type = RelationType . CHILD , ) john = User ( data = { 'name' : 'John' , 'address' : { 'street' : 'First' , 'number' : 1 }}, storage = storage , ) assert john . address . user == john Self-nested import typing as t from corm import Storage , Entity , Relationship , Nested , RelationType class Item ( Entity ): id : int items : t . List [ 'Item' ] = Nested ( entity_type = 'Item' , many = True , back_relation_type = RelationType . CHILD , ) parent : 'Item' = Relationship ( entity_type = 'Item' , relation_type = RelationType . CHILD , ) storage = Storage () item1 = Item ({ 'id' : 1 , 'items' : [{ 'id' : 2 }, { 'id' : 3 }]}, storage ) item2 , item3 = item1 . items assert item1 . id == 1 assert item1 . parent is None assert item2 . id == 2 assert item2 . parent == item1 assert item2 . items == [] assert item3 . id == 3 assert item3 . parent == item1 assert item3 . items == []","title":"Relationships"},{"location":"usage/relationships/#simple-relationship","text":"from corm import Storage , Entity , Nested class Address ( Entity ): street : str number : int class User ( Entity ): name : str address : Address = Nested ( entity_type = Address ) storage = Storage () john = User ( data = { 'name' : 'John' , 'address' : { 'street' : 'First' , 'number' : 1 }}, storage = storage , ) assert john . address . street == 'First' assert john . address . number == 1","title":"Simple relationship"},{"location":"usage/relationships/#manually-related-entities","text":"from corm import Storage , Entity , Relationship , RelationType storage = Storage () class Address ( Entity ): street : str number : int class User ( Entity ): name : str address : Address = Relationship ( entity_type = Address , relation_type = RelationType . PARENT , ) address = Address ({ 'street' : 'First' , 'number' : 1 }, storage ) john = User ({ 'name' : 'John' }, storage ) storage . make_relation ( from_ = john , to_ = address , relation_type = RelationType . PARENT , ) assert john . address == address","title":"Manually related entities"},{"location":"usage/relationships/#bidirectional-relationships","text":"from corm import Storage , Entity , Relationship , Nested , RelationType storage = Storage () class Address ( Entity ): street : str number : int user : 'User' = Relationship ( entity_type = 'User' , relation_type = RelationType . CHILD , ) class User ( Entity ): name : str address : Address = Nested ( entity_type = Address , back_relation_type = RelationType . CHILD , ) john = User ( data = { 'name' : 'John' , 'address' : { 'street' : 'First' , 'number' : 1 }}, storage = storage , ) assert john . address . user == john","title":"Bidirectional relationships"},{"location":"usage/relationships/#self-nested","text":"import typing as t from corm import Storage , Entity , Relationship , Nested , RelationType class Item ( Entity ): id : int items : t . List [ 'Item' ] = Nested ( entity_type = 'Item' , many = True , back_relation_type = RelationType . CHILD , ) parent : 'Item' = Relationship ( entity_type = 'Item' , relation_type = RelationType . CHILD , ) storage = Storage () item1 = Item ({ 'id' : 1 , 'items' : [{ 'id' : 2 }, { 'id' : 3 }]}, storage ) item2 , item3 = item1 . items assert item1 . id == 1 assert item1 . parent is None assert item2 . id == 2 assert item2 . parent == item1 assert item2 . items == [] assert item3 . id == 3 assert item3 . parent == item1 assert item3 . items == []","title":"Self-nested"},{"location":"usage/storage/","text":"","title":"Storage"}]}